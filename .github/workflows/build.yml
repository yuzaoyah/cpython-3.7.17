name: Tests

# bpo-40548: "paths-ignore" is not used to skip documentation-only PRs, because
# it prevents to mark a job as mandatory. A PR cannot be merged if a job is
# mandatory but not scheduled because of "paths-ignore".
on:
  pull_request:
    branches:
    - master
    - 3.8
    - 3.7

jobs:
  check_source:
    name: 'Check for source changes'
    runs-on: ubuntu-latest
    outputs:
      run_tests: ${{ steps.check.outputs.run_tests }}
    steps:
      - uses: actions/checkout@v2
        with:
            fetch-depth: 1000
      - name: Check for source changes
        id: check
        run: |
          if [ -z "$GITHUB_BASE_REF" ]; then
            echo '::set-output name=run_tests::true'
          else
            git fetch origin $GITHUB_BASE_REF --depth=1
            # git diff "origin/$GITHUB_BASE_REF..." (3 dots) may be more
            # reliable than git diff "origin/$GITHUB_BASE_REF.." (2 dots),
            # but it requires to download more commits (this job uses
            # "git fetch --depth=1").
            #
            # git diff "origin/$GITHUB_BASE_REF..." (3 dots) works with Git
            # 2.26, but Git 2.28 is stricter and fails with "no merge base".
            #
            # git diff "origin/$GITHUB_BASE_REF.." (2 dots) should be enough on
            # GitHub, since GitHub starts by merging origin/$GITHUB_BASE_REF
            # into the PR branch anyway.
            #
            # https://github.com/python/core-workflow/issues/373
            git diff --name-only origin/$GITHUB_BASE_REF.. | grep -qvE '(\.rst$|^Doc|^Misc)' && echo '::set-output name=run_tests::true' || true
          fi

  check_abi:
    name: 'Check if the ABI has changed'
    runs-on: ubuntu-20.04
    needs: check_source
    if: needs.check_source.outputs.run_tests == 'true'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install Dependencies
        run: |
            sudo ./.github/workflows/posix-deps-apt.sh
            sudo apt-get install -yq abigail-tools
      - name: Build CPython
        env:
          CFLAGS: -g3 -O0
        run: |
          # Build Python with the libpython dynamic library
          ./configure --enable-shared
          make -j4
      - name: Check for changes in the ABI
        run: make check-abidump

  check_generated_files:
    name: 'Check if generated files are up to date'
    runs-on: ubuntu-latest
    needs: check_source
    if: needs.check_source.outputs.run_tests == 'true'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install Dependencies
        run: sudo ./.github/workflows/posix-deps-apt.sh
      - name: Build CPython
        run: |
          ./configure --with-pydebug
          make -j4 regen-all
      - name: Check for changes
        run: |
          changes=$(git status --porcelain)
          # Check for changes in regenerated files
          if ! test -z "$changes"
          then
            echo "Generated files not up to date. Perhaps you forgot to run make regen-all ;)"
            echo "$changes"
            exit 1
          fi
      - name: Check exported libpython symbols
        run: make smelly

  build_win32:
    name: 'Windows (x86)'
    runs-on: windows-2019
    needs: check_source
    if: needs.check_source.outputs.run_tests == 'true'
    steps:
    - uses: actions/checkout@v2
    - name: Build CPython
      run: .\PCbuild\build.bat -e -p Win32
    - name: Display build info
      run: .\python.bat -m test.pythoninfo
    - name: Tests
      run: .\PCbuild\rt.bat -p Win32 -q -uall -u-cpu -rwW --slowest --timeout=1200 -j0

  build_win_amd64:
    name: 'Windows (x64)'
    runs-on: windows-2019
    needs: check_source
    if: needs.check_source.outputs.run_tests == 'true'
    steps:
    - uses: actions/checkout@v2
    - name: Build CPython
      run: .\PCbuild\build.bat -e -p x64
    - name: Display build info
      run: .\python.bat -m test.pythoninfo
    - name: Tests
      run: .\PCbuild\rt.bat -p x64 -q -uall -u-cpu -rwW --slowest --timeout=1200 -j0

  build_macos:
    name: 'macOS'
    runs-on: macos-latest
    needs: check_source
    if: needs.check_source.outputs.run_tests == 'true'
    env:
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
    steps:
    - uses: actions/checkout@v2
    - name: Configure CPython
      run: |
        brew install pkg-config openssl@1.1 xz gdbm tcl-tk
        brew install zlib bzip2 ncurses readline sqlite
        SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk \
        CC=clang \
        CPPFLAGS="-I$(brew --prefix gdbm)/include -I$(brew --prefix xz)/include \
            -I$(brew --prefix zlib)/include  -I$(brew --prefix bzip2)/include \
            -I$(brew --prefix ncurses)/include -I$(brew --prefix readline)/include \
            -I$(brew --prefix sqlite)/include" \
        LDFLAGS="-L$(brew --prefix gdbm)/lib -L$(brew --prefix xz)/lib \
            -L$(brew --prefix zlib)/lib  -L$(brew --prefix bzip2)/lib \
            -L$(brew --prefix ncurses)/lib -L$(brew --prefix readline)/lib \
            -L$(brew --prefix sqlite)/lib" \
        ./configure --prefix=/opt/python-dev \
            --with-pydebug \
            --with-openssl="$(brew --prefix openssl@1.1)" \
            --with-tcltk-libs="$(pkg-config --libs tk)" \
            --with-tcltk-includes="$(pkg-config --cflags tk)"
    - name: Build CPython
      run: make -j4
    - name: Display build info
      run: make pythoninfo
    - name: Tests
      run: make buildbottest TESTOPTS="-j4 -uall,-cpu"

  build_ubuntu:
    name: 'Ubuntu'
    runs-on: ubuntu-20.04
    needs: check_source
    if: needs.check_source.outputs.run_tests == 'true'
    env:
      OPENSSL_VER: 1.1.1u
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: sudo ./.github/workflows/posix-deps-apt.sh
    - name: 'Restore OpenSSL build'
      id: cache-openssl
      uses: actions/cache@v2.1.3
      with:
        path: ./multissl/openssl/${{ env.OPENSSL_VER }}
        key: ${{ runner.os }}-multissl-openssl-${{ env.OPENSSL_VER }}
    - name: Install OpenSSL
      if: steps.cache-openssl.outputs.cache-hit != 'true'
      run: python3 Tools/ssl/multissltests.py --steps=library --base-directory $PWD/multissl --openssl $OPENSSL_VER --system Linux
    - name: Configure CPython
      run: ./configure --with-pydebug --with-openssl=$PWD/multissl/openssl/$OPENSSL_VER
    - name: Build CPython
      run: make -j4
    - name: Display build info
      run: make pythoninfo
    - name: Tests
      run: xvfb-run make buildbottest TESTOPTS="-j4 -uall,-cpu"
